"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/admin",{

/***/ "(pages-dir-browser)/./lib/activityLogger.js":
/*!*******************************!*\
  !*** ./lib/activityLogger.js ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACTIVITY_TYPES: () => (/* binding */ ACTIVITY_TYPES),\n/* harmony export */   logActivity: () => (/* binding */ logActivity),\n/* harmony export */   testActivityLogging: () => (/* binding */ testActivityLogging)\n/* harmony export */ });\n/* harmony import */ var _supabaseClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabaseClient */ \"(pages-dir-browser)/./lib/supabaseClient.js\");\n// lib/activityLogger.js\n\nasync function logActivity({ activityType, title, subtitle = null, details = null, restaurantId = null, restaurantName = null, metadata = {} }) {\n    try {\n        // Get the current user\n        const { data: { user }, error: userError } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_0__[\"default\"].auth.getUser();\n        if (userError) {\n            console.error('Error getting user for activity log:', userError);\n            return;\n        }\n        if (!user) {\n            console.warn('No authenticated user found for activity logging');\n            return;\n        }\n        console.log('Logging activity:', {\n            activityType,\n            title,\n            user: user.id\n        });\n        const activityData = {\n            activity_type: activityType,\n            title,\n            subtitle,\n            details,\n            restaurant_id: restaurantId,\n            restaurant_name: restaurantName,\n            user_id: user.id,\n            metadata: metadata || {},\n            created_at: new Date().toISOString()\n        };\n        const { data, error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_0__[\"default\"].from('activity_logs').insert([\n            activityData\n        ]).select();\n        if (error) {\n            console.error('Error inserting activity log:', error);\n            console.error('Activity data that failed:', activityData);\n            // Check if it's an RLS policy error\n            if (error.code === '42501' || error.message.includes('policy')) {\n                console.error('This appears to be an RLS policy error. Make sure you have the correct policies set up on the activity_logs table.');\n            }\n        } else {\n            console.log('Activity logged successfully:', data);\n        }\n    } catch (error) {\n        console.error('Unexpected error in logActivity:', error);\n    }\n}\n// Test function to verify activity logging is working\nasync function testActivityLogging() {\n    console.log('Testing activity logging...');\n    await logActivity({\n        activityType: ACTIVITY_TYPES.INVOICE_CREATED,\n        title: 'Test activity log',\n        subtitle: 'This is a test',\n        details: 'Testing if activity logging is working properly',\n        metadata: {\n            test: true\n        }\n    });\n}\n// Activity type constants\nconst ACTIVITY_TYPES = {\n    PROSPECT_CREATED: 'prospect_created',\n    PROSPECT_UPDATED: 'prospect_updated',\n    PROSPECT_DELETED: 'prospect_deleted',\n    INVOICE_CREATED: 'invoice_created',\n    INVOICE_UPDATED: 'invoice_updated',\n    CLIENT_CREATED: 'client_created',\n    USER_LOGIN: 'user_login',\n    USER_LOGOUT: 'user_logout'\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL2xpYi9hY3Rpdml0eUxvZ2dlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsd0JBQXdCO0FBQ2dCO0FBRWpDLGVBQWVDLFlBQVksRUFDaENDLFlBQVksRUFDWkMsS0FBSyxFQUNMQyxXQUFXLElBQUksRUFDZkMsVUFBVSxJQUFJLEVBQ2RDLGVBQWUsSUFBSSxFQUNuQkMsaUJBQWlCLElBQUksRUFDckJDLFdBQVcsQ0FBQyxDQUFDLEVBQ2Q7SUFDQyxJQUFJO1FBQ0YsdUJBQXVCO1FBQ3ZCLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUUsRUFBRUMsT0FBT0MsU0FBUyxFQUFFLEdBQUcsTUFBTVosNERBQWEsQ0FBQ2MsT0FBTztRQUV4RSxJQUFJRixXQUFXO1lBQ2JHLFFBQVFKLEtBQUssQ0FBQyx3Q0FBd0NDO1lBQ3REO1FBQ0Y7UUFFQSxJQUFJLENBQUNGLE1BQU07WUFDVEssUUFBUUMsSUFBSSxDQUFDO1lBQ2I7UUFDRjtRQUVBRCxRQUFRRSxHQUFHLENBQUMscUJBQXFCO1lBQUVmO1lBQWNDO1lBQU9PLE1BQU1BLEtBQUtRLEVBQUU7UUFBQztRQUV0RSxNQUFNQyxlQUFlO1lBQ25CQyxlQUFlbEI7WUFDZkM7WUFDQUM7WUFDQUM7WUFDQWdCLGVBQWVmO1lBQ2ZnQixpQkFBaUJmO1lBQ2pCZ0IsU0FBU2IsS0FBS1EsRUFBRTtZQUNoQlYsVUFBVUEsWUFBWSxDQUFDO1lBQ3ZCZ0IsWUFBWSxJQUFJQyxPQUFPQyxXQUFXO1FBQ3BDO1FBRUEsTUFBTSxFQUFFakIsSUFBSSxFQUFFRSxLQUFLLEVBQUUsR0FBRyxNQUFNWCw0REFDdkIsQ0FBQyxpQkFDTDRCLE1BQU0sQ0FBQztZQUFDVDtTQUFhLEVBQ3JCVSxNQUFNO1FBRVQsSUFBSWxCLE9BQU87WUFDVEksUUFBUUosS0FBSyxDQUFDLGlDQUFpQ0E7WUFDL0NJLFFBQVFKLEtBQUssQ0FBQyw4QkFBOEJRO1lBRTVDLG9DQUFvQztZQUNwQyxJQUFJUixNQUFNbUIsSUFBSSxLQUFLLFdBQVduQixNQUFNb0IsT0FBTyxDQUFDQyxRQUFRLENBQUMsV0FBVztnQkFDOURqQixRQUFRSixLQUFLLENBQUM7WUFDaEI7UUFDRixPQUFPO1lBQ0xJLFFBQVFFLEdBQUcsQ0FBQyxpQ0FBaUNSO1FBQy9DO0lBQ0YsRUFBRSxPQUFPRSxPQUFPO1FBQ2RJLFFBQVFKLEtBQUssQ0FBQyxvQ0FBb0NBO0lBQ3BEO0FBQ0Y7QUFFQSxzREFBc0Q7QUFDL0MsZUFBZXNCO0lBQ3BCbEIsUUFBUUUsR0FBRyxDQUFDO0lBRVosTUFBTWhCLFlBQVk7UUFDaEJDLGNBQWNnQyxlQUFlQyxlQUFlO1FBQzVDaEMsT0FBTztRQUNQQyxVQUFVO1FBQ1ZDLFNBQVM7UUFDVEcsVUFBVTtZQUFFNEIsTUFBTTtRQUFLO0lBQ3pCO0FBQ0Y7QUFFQSwwQkFBMEI7QUFDbkIsTUFBTUYsaUJBQWlCO0lBQzVCRyxrQkFBa0I7SUFDbEJDLGtCQUFrQjtJQUNsQkMsa0JBQWtCO0lBQ2xCSixpQkFBaUI7SUFDakJLLGlCQUFpQjtJQUNqQkMsZ0JBQWdCO0lBQ2hCQyxZQUFZO0lBQ1pDLGFBQWE7QUFFZixFQUFFIiwic291cmNlcyI6WyIvd29ya3NwYWNlcy9yZXN0YXVyYW50LWRhc2hib2FyZC9saWIvYWN0aXZpdHlMb2dnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbGliL2FjdGl2aXR5TG9nZ2VyLmpzXG5pbXBvcnQgc3VwYWJhc2UgZnJvbSAnLi9zdXBhYmFzZUNsaWVudCc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2dBY3Rpdml0eSh7XG4gIGFjdGl2aXR5VHlwZSxcbiAgdGl0bGUsXG4gIHN1YnRpdGxlID0gbnVsbCxcbiAgZGV0YWlscyA9IG51bGwsXG4gIHJlc3RhdXJhbnRJZCA9IG51bGwsXG4gIHJlc3RhdXJhbnROYW1lID0gbnVsbCxcbiAgbWV0YWRhdGEgPSB7fVxufSkge1xuICB0cnkge1xuICAgIC8vIEdldCB0aGUgY3VycmVudCB1c2VyXG4gICAgY29uc3QgeyBkYXRhOiB7IHVzZXIgfSwgZXJyb3I6IHVzZXJFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5nZXRVc2VyKCk7XG4gICAgXG4gICAgaWYgKHVzZXJFcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyB1c2VyIGZvciBhY3Rpdml0eSBsb2c6JywgdXNlckVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIGNvbnNvbGUud2FybignTm8gYXV0aGVudGljYXRlZCB1c2VyIGZvdW5kIGZvciBhY3Rpdml0eSBsb2dnaW5nJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coJ0xvZ2dpbmcgYWN0aXZpdHk6JywgeyBhY3Rpdml0eVR5cGUsIHRpdGxlLCB1c2VyOiB1c2VyLmlkIH0pO1xuXG4gICAgY29uc3QgYWN0aXZpdHlEYXRhID0ge1xuICAgICAgYWN0aXZpdHlfdHlwZTogYWN0aXZpdHlUeXBlLFxuICAgICAgdGl0bGUsXG4gICAgICBzdWJ0aXRsZSxcbiAgICAgIGRldGFpbHMsXG4gICAgICByZXN0YXVyYW50X2lkOiByZXN0YXVyYW50SWQsXG4gICAgICByZXN0YXVyYW50X25hbWU6IHJlc3RhdXJhbnROYW1lLFxuICAgICAgdXNlcl9pZDogdXNlci5pZCxcbiAgICAgIG1ldGFkYXRhOiBtZXRhZGF0YSB8fCB7fSxcbiAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgIH07XG5cbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oJ2FjdGl2aXR5X2xvZ3MnKVxuICAgICAgLmluc2VydChbYWN0aXZpdHlEYXRhXSlcbiAgICAgIC5zZWxlY3QoKTtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW5zZXJ0aW5nIGFjdGl2aXR5IGxvZzonLCBlcnJvcik7XG4gICAgICBjb25zb2xlLmVycm9yKCdBY3Rpdml0eSBkYXRhIHRoYXQgZmFpbGVkOicsIGFjdGl2aXR5RGF0YSk7XG4gICAgICBcbiAgICAgIC8vIENoZWNrIGlmIGl0J3MgYW4gUkxTIHBvbGljeSBlcnJvclxuICAgICAgaWYgKGVycm9yLmNvZGUgPT09ICc0MjUwMScgfHwgZXJyb3IubWVzc2FnZS5pbmNsdWRlcygncG9saWN5JykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignVGhpcyBhcHBlYXJzIHRvIGJlIGFuIFJMUyBwb2xpY3kgZXJyb3IuIE1ha2Ugc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBwb2xpY2llcyBzZXQgdXAgb24gdGhlIGFjdGl2aXR5X2xvZ3MgdGFibGUuJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCdBY3Rpdml0eSBsb2dnZWQgc3VjY2Vzc2Z1bGx5OicsIGRhdGEpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdVbmV4cGVjdGVkIGVycm9yIGluIGxvZ0FjdGl2aXR5OicsIGVycm9yKTtcbiAgfVxufVxuXG4vLyBUZXN0IGZ1bmN0aW9uIHRvIHZlcmlmeSBhY3Rpdml0eSBsb2dnaW5nIGlzIHdvcmtpbmdcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0ZXN0QWN0aXZpdHlMb2dnaW5nKCkge1xuICBjb25zb2xlLmxvZygnVGVzdGluZyBhY3Rpdml0eSBsb2dnaW5nLi4uJyk7XG4gIFxuICBhd2FpdCBsb2dBY3Rpdml0eSh7XG4gICAgYWN0aXZpdHlUeXBlOiBBQ1RJVklUWV9UWVBFUy5JTlZPSUNFX0NSRUFURUQsXG4gICAgdGl0bGU6ICdUZXN0IGFjdGl2aXR5IGxvZycsXG4gICAgc3VidGl0bGU6ICdUaGlzIGlzIGEgdGVzdCcsXG4gICAgZGV0YWlsczogJ1Rlc3RpbmcgaWYgYWN0aXZpdHkgbG9nZ2luZyBpcyB3b3JraW5nIHByb3Blcmx5JyxcbiAgICBtZXRhZGF0YTogeyB0ZXN0OiB0cnVlIH1cbiAgfSk7XG59XG5cbi8vIEFjdGl2aXR5IHR5cGUgY29uc3RhbnRzXG5leHBvcnQgY29uc3QgQUNUSVZJVFlfVFlQRVMgPSB7XG4gIFBST1NQRUNUX0NSRUFURUQ6ICdwcm9zcGVjdF9jcmVhdGVkJyxcbiAgUFJPU1BFQ1RfVVBEQVRFRDogJ3Byb3NwZWN0X3VwZGF0ZWQnLFxuICBQUk9TUEVDVF9ERUxFVEVEOiAncHJvc3BlY3RfZGVsZXRlZCcsXG4gIElOVk9JQ0VfQ1JFQVRFRDogJ2ludm9pY2VfY3JlYXRlZCcsXG4gIElOVk9JQ0VfVVBEQVRFRDogJ2ludm9pY2VfdXBkYXRlZCcsXG4gIENMSUVOVF9DUkVBVEVEOiAnY2xpZW50X2NyZWF0ZWQnLFxuICBVU0VSX0xPR0lOOiAndXNlcl9sb2dpbicsXG4gIFVTRVJfTE9HT1VUOiAndXNlcl9sb2dvdXQnLFxuICAvLyBBZGQgbW9yZSBhcyBuZWVkZWRcbn07Il0sIm5hbWVzIjpbInN1cGFiYXNlIiwibG9nQWN0aXZpdHkiLCJhY3Rpdml0eVR5cGUiLCJ0aXRsZSIsInN1YnRpdGxlIiwiZGV0YWlscyIsInJlc3RhdXJhbnRJZCIsInJlc3RhdXJhbnROYW1lIiwibWV0YWRhdGEiLCJkYXRhIiwidXNlciIsImVycm9yIiwidXNlckVycm9yIiwiYXV0aCIsImdldFVzZXIiLCJjb25zb2xlIiwid2FybiIsImxvZyIsImlkIiwiYWN0aXZpdHlEYXRhIiwiYWN0aXZpdHlfdHlwZSIsInJlc3RhdXJhbnRfaWQiLCJyZXN0YXVyYW50X25hbWUiLCJ1c2VyX2lkIiwiY3JlYXRlZF9hdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImZyb20iLCJpbnNlcnQiLCJzZWxlY3QiLCJjb2RlIiwibWVzc2FnZSIsImluY2x1ZGVzIiwidGVzdEFjdGl2aXR5TG9nZ2luZyIsIkFDVElWSVRZX1RZUEVTIiwiSU5WT0lDRV9DUkVBVEVEIiwidGVzdCIsIlBST1NQRUNUX0NSRUFURUQiLCJQUk9TUEVDVF9VUERBVEVEIiwiUFJPU1BFQ1RfREVMRVRFRCIsIklOVk9JQ0VfVVBEQVRFRCIsIkNMSUVOVF9DUkVBVEVEIiwiVVNFUl9MT0dJTiIsIlVTRVJfTE9HT1VUIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./lib/activityLogger.js\n"));

/***/ })

});